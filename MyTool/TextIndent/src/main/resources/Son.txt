### Organized around Business Capabilities

When looking to split a large application into parts, 
often management focuses on the technology layer, leading to UI teams, server-side logic teams, and 
database teams. When teams are separated along these lines, even simple changes can lead to a cross-
team project taking time and budgetary approval. A smart team will optimise around this and plump for the lesser of two evils -
just force the logic into whichever application they have access to. Log
ic everywhere in other words. This is an example of Conway's Law in action.
Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.

-- Melvin Conway, 1968
围绕业务能力组件团队
当一个大的应用分为几个部分的时候,经常管理层会集中在技术层,导致UI团队,服务端团队,和数据库团队.当这些团队被沿着这些技术线分开,甚至一个小小的改变
都会导致跨团队工程,花费的时间和预算都不可小视,一个聪明的团队会优化这个问题,两害相权取其轻-就是强制把代码逻辑塞入他们可以访问的应用.换句话说就是逻辑到处都是
这就是康威定律(任何组织的设计系统(广泛定义)将会生产一个设计的架构,而这个架构与这个组织的交流架构相一致)在起作用的活生生的例子。

Figure 2: Conway's Law in action

The microservice approach to division is different, splitting up into services organized around **business capability**.
Such services take a broad-stack implementation of software for that business area,
including user-interface, persistant storage, and any external collaborations. Consequently the team
s are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.
微服务分解的方法是不同的, 围绕业务分为服务.这些服务提供了广泛的软件业务领域实现,包括用户界面,持久存储,和以及任何对外的协作性操作.因此,团队是跨功能的，它拥有软件开发所需的全方位的技能：用户体验、数据库和项目管理。

Figure 3: Service boundaries reinforced by team boundaries

One company organised in this way is [www.comparethemarket.com](http://www.comparethemarket.com
/). Cross functional teams are responsible for building and operating each product and each product 
is split out into a number of individual services communicating via a message bus.

Large monolith
ic applications can always be modularized around business capabilities too, although that's not the 
common case. Certainly we would urge a large team building a monolithic application to divide itself
 along business lines. The main issue we have seen here, is that they tend to be organised around *t
oo many* contexts. If the monolith spans many of these modular boundaries it can be difficult for in
dividual members of a team to fit them into their short-term memory. Additionally we see that the mo
dular lines require a great deal of discipline to enforce. The necessarily more explicit separation 
required by service components makes it easier to keep the team boundaries clear.

###  Question:H
ow big is a microservice?

Although “microservice” has become a popular name for this architectura
l style, its name does lead to an unfortunate focus on the size of service, and arguments about what
 constitutes “micro”. In our conversations with microservice practitioners, we see a range of sizes 
of services. The largest sizes reported follow Amazon's notion of the Two Pizza Team (i.e. the whole
 team can be fed by two pizzas), meaning no more than a dozen people. On the smaller size scale we'v
e seen setups where a team of half-a-dozen would support half-a-dozen services.

This leads to the
 question of whether there are sufficiently large differences within this size range that the servic
e-per-dozen-people and service-per-person sizes shouldn't be lumped under one microservices label. A
t the moment we think it's better to group them together, but it's certainly possible that we'll cha
