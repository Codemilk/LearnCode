### Componentization via Services

For as long as we've been involved in the software industry, there's been a desire to build systems
by plugging together components, much in the way we see things
are made in the physical world. During the last couple of decades we've seen considerable progress w
ith large compendiums of common libraries that are part of most language platforms.
## 通过服务组件化
只要我们涉及到软件工程,我们就会想要通过将组建插在一起来构建系统,就好像在物理世界中我们看待事物的方式.过去二十年中,我们看见很大的进步在
公共软件库(large compendiums of common libraries),其中大部分是编程语言平台
When talking 
about components we run into the difficult definition of what makes a component. [Our definition](ht
tps://martinfowler.com/bliki/SoftwareComponent.html) is that a **component** is a unit of software t
hat is independently replaceable and upgradeable.

当谈论到组件的时候,我们遇到了一个难题,什么是组件.我们的定义时(https://martinfowler.com/bliki/SoftwareComponent.html).一个组件就是一个可以独立更换和升级的软件单元
but their primary way of componentizing their own software is by breaking down into services. We def
ine **libraries** as components that are linked into a program and called using in-memory function c
alls, while **services** are out-of-process components who communicate with a mechanism such as a we
b service request, or remote procedure call. (This is a different concept to that of a service objec
t in many OO programs [[3\]](https://martinfowler.com/articles/microservices.html#footnote-service-o
bject).)
但他们组件化的首要方法是将软降分类为服务.我们将软件库定义为组件，它可以连接到项目并且通过内存中的函数来调用,服务是在进程外组件,它交流通过web service
的机制,或者远程程序调用.(这不同于许多面向对象的程序中的service object概念(https://martinfowler.com/articles/microservices.html#footnote-service-object))

One main reason for using services as components (rather than libraries) is that service
s are independently deployable. If you have an application [[4\]](https://martinfowler.com/articles/
microservices.html#footnote-application) that consists of a multiple libraries in a single process, 
a change to any single component results in having to redeploy the entire application. But if that a
pplication is decomposed into multiple services, you can expect many single service changes to only 
require that service to be redeployed. That's not an absolute, some changes will change service inte
rfaces resulting in some coordination, but the aim of a good microservice architecture is to minimiz
e these through cohesive service boundaries and evolution mechanisms in the service contracts.


An
other consequence of using services as components is a more explicit component interface. Most langu
ages do not have a good mechanism for defining an explicit [Published Interface](https://martinfowle
r.com/bliki/PublishedInterface.html). Often it's only documentation and discipline that prevents cli
ents breaking a component's encapsulation, leading to overly-tight coupling between components. Serv
ices make it easier to avoid this by using explicit remote call mechanisms.

Using services like t
his does have downsides. Remote calls are more expensive than in-process calls, and thus remote APIs
 need to be coarser-grained, which is often more awkward to use. If you need to change the allocatio
n of responsibilities between components, such movements of behavior are harder to do when you're cr
ossing process boundaries.

At a first approximation, we can observe that services map to runtime 
processes, but that is only a first approximation. A service may consist of multiple processes that 
will always be developed and deployed together, such as an application process and a database that's
