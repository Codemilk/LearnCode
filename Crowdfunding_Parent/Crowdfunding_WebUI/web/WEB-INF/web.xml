<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--    配置字符集拦截器-->
    <!--CharacterEncodingFilter这个filter一定要在所有的filter
             原因：request.setCharacterEncoding(encoding),一定一早在getAttributes（其他filter生效）前面
    -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <!--        拦截所有路径-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置监听器-->
    <!--    引入外部spring文件-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:Spring_Tx.xml,classpath*:Spring_Mybatis.xml</param-value>
    </context-param>
    <!--在服务器创建的时候监听servletContext，创建ioc 把servlet传入IOC-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--配置转发器dispatcherServlet
             一般servlet默认生命周期，创建对象在第一次接受请求的时候
             但在dispatcherServlet里面，有很多的框架初始化操作，不适合在请求的时候在来初始化
             设置<load-on-startup>1</load-on-startup>为了让servlet最早去创建
               但是加载顺序不会超过listener filter 加载顺序：listener->Filter>servlet
    -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:Spring_Mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!--        配置url-servlet的方式：/表示拦截所有请求-->
        <!--        <url-pattern>/</url-pattern>-->
        <!--        配置url-servlet的方式：通过扩展名-->
        <!--        优点1：xxx.css，xxx.js，xxx.png等静态资源完全不经过SpringMvc，不需要特殊处理
                    优点2：可以实现伪静态效果，表面看起来是一个静态html文件，实际上是动态java运行的结果
                          给黑客入侵增加难度
                          利于SEO优化，SEO就是让百度，谷歌搜索引擎更容易找到我们的项目
                    缺点：不符合Restful风格，
                    -->
        <url-pattern>*.html</url-pattern>
        <!--   为什么要另外配置一个json扩展名呢

              如果一个Ajax请求扩展名是html，但是实际服务器返回的是*.json，就会报错406，所以我们的需要可以拦截*.json

        -->
        <!--
                                1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码
                                2. 2xx：成功。代表：200
                                3. 3xx：重定向。代表：302(重定向)，304(访问缓存)
                                4. 4xx：客户端错误。
                                    * 代表：
                                        * 400：BadRequest 一般是参数问题，例如类型转换，参数为找到
                                        * 404（请求路径没有对应的资源）
                                        * 405：请求方式没有对应的doXxx方法
                                5. 5xx：服务器端错误。代表：500(服务器内部出现异常)
          -->
<!--        防止出现406,具体解释在笔记-->
        <url-pattern>*.json</url-pattern>

    </servlet-mapping>


</web-app>