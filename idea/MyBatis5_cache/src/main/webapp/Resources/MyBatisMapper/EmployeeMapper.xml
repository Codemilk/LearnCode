<?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper
                PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="COM.dao.EmployeeMapperDao">
<!--配置二级缓存
           属性：
           eviction=“FIFO”：缓存回收策略
                •LRU –最近最少使用的：移除最长时间不被使用的对象。
                •FIFO –先进先出：按对象进入缓存的顺序来移除它们。
                •SOFT –软引用：移除基于垃圾回收器状态和软引用规则的对象。
                •WEAK –弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
                •默认的是LRU。
           flushInterval：刷新间隔，单位毫秒
                •默认情况是不设置，也就是不清空
           size：引用数目，正整数
                •代表缓存最多可以存储多少个对象，太大容易导致内存溢出
           readOnly：只读，true/false
                •true：只读缓存；会将数据的引用交给用户，说白了，速度快，不安全
                •false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。
           type:指定自定义的缓存的全类名
-->

    <cache eviction="FIFO" flushInterval="60000" readOnly="true" size="1024"></cache>

    <!--
     namespace：名称空间
     id：唯一标识
     resultType：返回值类型
     #{id},从传递过来的参数中取出id值
-->
    <select id="getEmpById" resultType="employee" databaseId="mysql" useCache="true" >
        select id,last_name,email,gender from tbl_employee where id = #{id}
    </select>

<!--    parameterType表示参数类型，一般可以省略
        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys
        useGeneratedKeys="true",使用自增主键获取主键值策略
        keyProperty="id"：指定对应的主键属性，也就是mybatis获取到主键值以后，把这个值封装给javaBean的那个属性
-->
    <insert id="addEmpById" useGeneratedKeys="true" keyProperty="id" databaseId="mysql" parameterType="employee" flushCache="true">
        insert into tbl_employee(last_name,gender,email)
        values (#{lastname},#{gender},#{email})
    </insert>

<!--Oracle不支持自增:Oracle使用序列来模拟自增
           每次插入的数据的之间是从序列中拿到的值:如何获取这个值
-->
    <delete id="deleteEmpById" databaseId="mysql" >
    delete  from tbl_employee where id=#{id}

    </delete>

    <update id="updateEmpById" databaseId="mysql" parameterType="employee">
          update tbl_employee set last_name=#{lastname},email=#{email},gender=#{gender} where id=#{id}
    </update>

<!--俩个参数  public Employee getEmpByIdAndLastName(Integer id,String name);
-->
    <select resultType="employee" id="getEmpByIdAndLastName" databaseId="mysql">
        select * from tbl_employee where id=#{id} and last_name=#{lastname}
     </select>

<!--    参数处理pojo map-->
    <select id="getEmpByIdAndLastMap" resultType="employee" databaseId="mysql">
         select * from tbl_employee where id=${id} and last_name=#{lastname}
    </select>

<!--resultType:如果返回的是一个集合(list,collection)，要写集合元素中的类型-->
    <select id="getEmpsByLastName" resultType="employee" databaseId="mysql" >
        select * from tbl_employee where last_name like #{lastname}
    </select>

<!--    返回值为一条map,MyBatis自动将返回的employee的列名和值封装进map中-->
    <select id="getEmpByIdReturnMap" resultType="map" >
                select * from tbl_employee where id=#{id}

    </select>
<!--   返回多条记录的map：Map<Integer,Employee>:键是这条记录的主键，值是记录封装后的javaBean-->
    <select id="getEmpsByLastNameReturnMap" resultType="employee" >
                select * from tbl_employee where last_name like #{lastname}
    </select>


</mapper>